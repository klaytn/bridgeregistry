/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "lockToken(address)": FunctionFragment;
    "handleNoncesToBlockNums(uint64)": FunctionFragment;
    "operators(address)": FunctionFragment;
    "setKLAYFee(uint256,uint64)": FunctionFragment;
    "unlockKLAY()": FunctionFragment;
    "isRunning()": FunctionFragment;
    "requestERC721Transfer(address,address,uint256,bytes)": FunctionFragment;
    "requestERC20Transfer(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setERC20Fee(address,uint256,uint64)": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "MAX_OPERATOR()": FunctionFragment;
    "counterpartBridge()": FunctionFragment;
    "registeredTokenList(uint256)": FunctionFragment;
    "handleERC20Transfer(bytes32,address,address,address,uint256,uint64,uint64,bytes)": FunctionFragment;
    "registerToken(address,address)": FunctionFragment;
    "feeOfERC20(address)": FunctionFragment;
    "indexOfTokens(address)": FunctionFragment;
    "lowerHandleNonce()": FunctionFragment;
    "upperHandleNonce()": FunctionFragment;
    "operatorThresholds(uint8)": FunctionFragment;
    "lockedTokens(address)": FunctionFragment;
    "modeMintBurn()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestKLAYTransfer(address,uint256,bytes)": FunctionFragment;
    "requestNonce()": FunctionFragment;
    "setCounterPartBridge(address)": FunctionFragment;
    "handledRequestTx(bytes32)": FunctionFragment;
    "registeredTokens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "closedValueTransferVotes(uint64)": FunctionFragment;
    "recoveryBlockNumber()": FunctionFragment;
    "unlockToken(address)": FunctionFragment;
    "lockKLAY()": FunctionFragment;
    "handleKLAYTransfer(bytes32,address,address,uint256,uint64,uint64,bytes)": FunctionFragment;
    "configurationNonce()": FunctionFragment;
    "handleERC721Transfer(bytes32,address,address,address,uint256,uint64,uint64,string,bytes)": FunctionFragment;
    "getOperatorList()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "deregisterToken(address)": FunctionFragment;
    "feeOfKLAY()": FunctionFragment;
    "start(bool)": FunctionFragment;
    "operatorList(uint256)": FunctionFragment;
    "onERC721Received(address,uint256,address,bytes)": FunctionFragment;
    "deregisterOperator(address)": FunctionFragment;
    "getRegisteredChildTokenList()": FunctionFragment;
    "chargeWithoutEvent()": FunctionFragment;
    "getRegisteredTokenList()": FunctionFragment;
    "setOperatorThreshold(uint8,uint8)": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "onERC20Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "isLockedKLAY()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "VERSION()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "lockToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "handleNoncesToBlockNums",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKLAYFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockKLAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isRunning", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestERC721Transfer",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestERC20Transfer",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Fee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "counterpartBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleERC20Transfer",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feeOfERC20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "indexOfTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lowerHandleNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upperHandleNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorThresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "modeMintBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestKLAYTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCounterPartBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handledRequestTx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closedValueTransferVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlockToken", values: [string]): string;
  encodeFunctionData(functionFragment: "lockKLAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleKLAYTransfer",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configurationNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleERC721Transfer",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "feeOfKLAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "operatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredChildTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chargeWithoutEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC20Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockedKLAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;

  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleNoncesToBlockNums",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKLAYFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlockKLAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRunning", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestERC721Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestERC20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterpartBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleERC20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOfERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerHandleNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upperHandleNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modeMintBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestKLAYTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCounterPartBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handledRequestTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closedValueTransferVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockKLAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleKLAYTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurationNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleERC721Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOfKLAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredChildTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeWithoutEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC20Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLockedKLAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;

  events: {
    "KLAYLocked()": EventFragment;
    "KLAYUnlocked()": EventFragment;
    "RequestValueTransfer(uint8,address,address,address,uint256,uint64,uint256,bytes)": EventFragment;
    "HandleValueTransfer(bytes32,uint8,address,address,address,uint256,uint64,uint64,bytes)": EventFragment;
    "TokenRegistered(address)": EventFragment;
    "TokenDeregistered(address)": EventFragment;
    "TokenLocked(address)": EventFragment;
    "TokenUnlocked(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "KLAYFeeChanged(uint256)": EventFragment;
    "ERC20FeeChanged(address,uint256)": EventFragment;
    "FeeReceiverChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KLAYLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KLAYUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestValueTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandleValueTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KLAYFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReceiverChanged"): EventFragment;
}

export type KLAYLockedEvent = TypedEvent<[] & {}>;

export type KLAYUnlockedEvent = TypedEvent<[] & {}>;

export type RequestValueTransferEvent = TypedEvent<
  [number, string, string, string, BigNumber, BigNumber, BigNumber, string] & {
    tokenType: number;
    from: string;
    to: string;
    tokenAddress: string;
    valueOrTokenId: BigNumber;
    requestNonce: BigNumber;
    fee: BigNumber;
    extraData: string;
  }
>;

export type HandleValueTransferEvent = TypedEvent<
  [
    string,
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    requestTxHash: string;
    tokenType: number;
    from: string;
    to: string;
    tokenAddress: string;
    valueOrTokenId: BigNumber;
    handleNonce: BigNumber;
    lowerHandleNonce: BigNumber;
    extraData: string;
  }
>;

export type TokenRegisteredEvent = TypedEvent<[string] & { token: string }>;

export type TokenDeregisteredEvent = TypedEvent<[string] & { token: string }>;

export type TokenLockedEvent = TypedEvent<[string] & { token: string }>;

export type TokenUnlockedEvent = TypedEvent<[string] & { token: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type KLAYFeeChangedEvent = TypedEvent<[BigNumber] & { fee: BigNumber }>;

export type ERC20FeeChangedEvent = TypedEvent<
  [string, BigNumber] & { token: string; fee: BigNumber }
>;

export type FeeReceiverChangedEvent = TypedEvent<
  [string] & { feeReceiver: string }
>;

export class Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeInterface;

  functions: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setKLAYFee(
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRunning(overrides?: CallOverrides): Promise<[boolean]>;

    requestERC721Transfer(
      _tokenAddress: string,
      _to: string,
      _tokenId: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestERC20Transfer(
      _tokenAddress: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setERC20Fee(
      _token: string,
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    counterpartBridge(overrides?: CallOverrides): Promise<[string]>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleERC20Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    indexOfTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    upperHandleNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    modeMintBurn(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestKLAYTransfer(
      _to: string,
      _value: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCounterPartBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleKLAYTransfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configurationNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    handleERC721Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _tokenURI: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOperatorList(overrides?: CallOverrides): Promise<[string[]]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeOfKLAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      _from: string,
      _tokenId: BigNumberish,
      _to: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chargeWithoutEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<[string[]]>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC20Received(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLockedKLAY(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  lockToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleNoncesToBlockNums(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setKLAYFee(
    _fee: BigNumberish,
    _requestNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockKLAY(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRunning(overrides?: CallOverrides): Promise<boolean>;

  requestERC721Transfer(
    _tokenAddress: string,
    _to: string,
    _tokenId: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestERC20Transfer(
    _tokenAddress: string,
    _to: string,
    _value: BigNumberish,
    _feeLimit: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setERC20Fee(
    _token: string,
    _fee: BigNumberish,
    _requestNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  counterpartBridge(overrides?: CallOverrides): Promise<string>;

  registeredTokenList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  handleERC20Transfer(
    _requestTxHash: BytesLike,
    _from: string,
    _to: string,
    _tokenAddress: string,
    _value: BigNumberish,
    _requestedNonce: BigNumberish,
    _requestedBlockNumber: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    _token: string,
    _cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

  upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

  operatorThresholds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  lockedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  modeMintBurn(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestKLAYTransfer(
    _to: string,
    _value: BigNumberish,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

  setCounterPartBridge(
    _bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handledRequestTx(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registeredTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  closedValueTransferVotes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  unlockToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockKLAY(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleKLAYTransfer(
    _requestTxHash: BytesLike,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _requestedNonce: BigNumberish,
    _requestedBlockNumber: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

  handleERC721Transfer(
    _requestTxHash: BytesLike,
    _from: string,
    _to: string,
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _requestedNonce: BigNumberish,
    _requestedBlockNumber: BigNumberish,
    _tokenURI: string,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOperatorList(overrides?: CallOverrides): Promise<string[]>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  deregisterToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

  start(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    _from: string,
    _tokenId: BigNumberish,
    _to: string,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deregisterOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegisteredChildTokenList(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chargeWithoutEvent(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegisteredTokenList(overrides?: CallOverrides): Promise<string[]>;

  setOperatorThreshold(
    _voteType: BigNumberish,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC20Received(
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeLimit: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLockedKLAY(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    lockToken(_token: string, overrides?: CallOverrides): Promise<void>;

    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setKLAYFee(
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockKLAY(overrides?: CallOverrides): Promise<void>;

    isRunning(overrides?: CallOverrides): Promise<boolean>;

    requestERC721Transfer(
      _tokenAddress: string,
      _to: string,
      _tokenId: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    requestERC20Transfer(
      _tokenAddress: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC20Fee(
      _token: string,
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    counterpartBridge(overrides?: CallOverrides): Promise<string>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handleERC20Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    modeMintBurn(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestKLAYTransfer(
      _to: string,
      _value: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

    setCounterPartBridge(
      _bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registeredTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    unlockToken(_token: string, overrides?: CallOverrides): Promise<void>;

    lockKLAY(overrides?: CallOverrides): Promise<void>;

    handleKLAYTransfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

    handleERC721Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _tokenURI: string,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getOperatorList(overrides?: CallOverrides): Promise<string[]>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    deregisterToken(_token: string, overrides?: CallOverrides): Promise<void>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    start(_status: boolean, overrides?: CallOverrides): Promise<void>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      _from: string,
      _tokenId: BigNumberish,
      _to: string,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegisteredChildTokenList(overrides?: CallOverrides): Promise<string[]>;

    chargeWithoutEvent(overrides?: CallOverrides): Promise<void>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<string[]>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC20Received(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isLockedKLAY(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "KLAYLocked()"(): TypedEventFilter<[], {}>;

    KLAYLocked(): TypedEventFilter<[], {}>;

    "KLAYUnlocked()"(): TypedEventFilter<[], {}>;

    KLAYUnlocked(): TypedEventFilter<[], {}>;

    "RequestValueTransfer(uint8,address,address,address,uint256,uint64,uint256,bytes)"(
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      requestNonce?: null,
      fee?: null,
      extraData?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        requestNonce: BigNumber;
        fee: BigNumber;
        extraData: string;
      }
    >;

    RequestValueTransfer(
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      requestNonce?: null,
      fee?: null,
      extraData?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        requestNonce: BigNumber;
        fee: BigNumber;
        extraData: string;
      }
    >;

    "HandleValueTransfer(bytes32,uint8,address,address,address,uint256,uint64,uint64,bytes)"(
      requestTxHash?: null,
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      handleNonce?: null,
      lowerHandleNonce?: null,
      extraData?: null
    ): TypedEventFilter<
      [
        string,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        requestTxHash: string;
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        handleNonce: BigNumber;
        lowerHandleNonce: BigNumber;
        extraData: string;
      }
    >;

    HandleValueTransfer(
      requestTxHash?: null,
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      handleNonce?: null,
      lowerHandleNonce?: null,
      extraData?: null
    ): TypedEventFilter<
      [
        string,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        requestTxHash: string;
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        handleNonce: BigNumber;
        lowerHandleNonce: BigNumber;
        extraData: string;
      }
    >;

    "TokenRegistered(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenRegistered(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenDeregistered(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenDeregistered(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenLocked(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenLocked(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenUnlocked(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUnlocked(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "KLAYFeeChanged(uint256)"(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    KLAYFeeChanged(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    "ERC20FeeChanged(address,uint256)"(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    ERC20FeeChanged(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    "FeeReceiverChanged(address)"(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;

    FeeReceiverChanged(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;
  };

  estimateGas: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setKLAYFee(
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRunning(overrides?: CallOverrides): Promise<BigNumber>;

    requestERC721Transfer(
      _tokenAddress: string,
      _to: string,
      _tokenId: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestERC20Transfer(
      _tokenAddress: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setERC20Fee(
      _token: string,
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    counterpartBridge(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleERC20Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    modeMintBurn(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestKLAYTransfer(
      _to: string,
      _value: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

    setCounterPartBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleKLAYTransfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

    handleERC721Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _tokenURI: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOperatorList(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      _from: string,
      _tokenId: BigNumberish,
      _to: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chargeWithoutEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC20Received(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLockedKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKLAYFee(
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRunning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestERC721Transfer(
      _tokenAddress: string,
      _to: string,
      _tokenId: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestERC20Transfer(
      _tokenAddress: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setERC20Fee(
      _token: string,
      _fee: BigNumberish,
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    counterpartBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleERC20Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeOfERC20(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexOfTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upperHandleNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modeMintBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestKLAYTransfer(
      _to: string,
      _value: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCounterPartBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockKLAY(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleKLAYTransfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configurationNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleERC721Transfer(
      _requestTxHash: BytesLike,
      _from: string,
      _to: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _requestedNonce: BigNumberish,
      _requestedBlockNumber: BigNumberish,
      _tokenURI: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOperatorList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeOfKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      _from: string,
      _tokenId: BigNumberish,
      _to: string,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chargeWithoutEvent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredTokenList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC20Received(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLockedKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
