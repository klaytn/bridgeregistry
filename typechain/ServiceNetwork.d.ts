/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ServiceNetworkInterface extends ethers.utils.Interface {
  functions: {
    "addBridgePair(string,string,address,string,address)": FunctionFragment;
    "addNetwork(string,string,string,string,uint256,string,string,uint256)": FunctionFragment;
    "deleteBridge(string)": FunctionFragment;
    "deleteNetwork(string)": FunctionFragment;
    "getActiveNetworks()": FunctionFragment;
    "getAllBridgePairs()": FunctionFragment;
    "getAllNetworks()": FunctionFragment;
    "getAllTokenPairs()": FunctionFragment;
    "getBridge(string)": FunctionFragment;
    "getNetwork(string)": FunctionFragment;
    "getNetworkKey(string,string)": FunctionFragment;
    "getTotalTokensNum()": FunctionFragment;
    "updateNetwork(string,string,string,string,string,uint256)": FunctionFragment;
    "updateParentTokenList(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBridgePair",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addNetwork",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteNetwork",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveNetworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBridgePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNetworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenPairs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "getNetwork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNetworkKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokensNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetwork",
    values: [string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParentTokenList",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBridgePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBridgePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokensNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParentTokenList",
    data: BytesLike
  ): Result;

  events: {};
}

export class ServiceNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ServiceNetworkInterface;

  functions: {
    addBridgePair(
      _name: string,
      _parentBridgeName: string,
      _parentBridgeAddress: string,
      _childBridgeName: string,
      _childBridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNetwork(
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteBridge(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteNetwork(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActiveNetworks(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          string,
          string,
          string,
          [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          },
          [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          }
        ] & {
          key: string;
          chainId: string;
          shortName: string;
          name: string;
          rpcUrl: string;
          networkId: BigNumber;
          nativeCurrency: [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          token: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          explorer: string;
          description: string;
          website: string;
          detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          };
          networkPair: [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          };
        })[]
      ]
    >;

    getAllBridgePairs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          string,
          string,
          ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[]
        ] & {
          key: string;
          name: string;
          parentBridgeName: string;
          parentBridgeAddress: string;
          childBridgeName: string;
          childBridgeAddress: string;
          tokenPairs: ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[];
        })[]
      ] & {
        brigePairs: ([
          string,
          string,
          string,
          string,
          string,
          string,
          ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[]
        ] & {
          key: string;
          name: string;
          parentBridgeName: string;
          parentBridgeAddress: string;
          childBridgeName: string;
          childBridgeAddress: string;
          tokenPairs: ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[];
        })[];
      }
    >;

    getAllNetworks(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          string,
          string,
          string,
          [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          },
          [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          }
        ] & {
          key: string;
          chainId: string;
          shortName: string;
          name: string;
          rpcUrl: string;
          networkId: BigNumber;
          nativeCurrency: [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          token: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          explorer: string;
          description: string;
          website: string;
          detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          };
          networkPair: [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          };
        })[]
      ]
    >;

    getAllTokenPairs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          }
        ] & {
          parentToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          childToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
        })[]
      ]
    >;

    getBridge(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[]
        ] & {
          key: string;
          name: string;
          parentBridgeName: string;
          parentBridgeAddress: string;
          childBridgeName: string;
          childBridgeAddress: string;
          tokenPairs: ([
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            },
            [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            }
          ] & {
            parentToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
            childToken: [string, number, string, string, BigNumber] & {
              tokenAddress: string;
              tokenType: number;
              name: string;
              symbol: string;
              decimals: BigNumber;
            };
          })[];
        }
      ]
    >;

    getNetwork(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          string,
          string,
          string,
          [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          },
          [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          }
        ] & {
          key: string;
          chainId: string;
          shortName: string;
          name: string;
          rpcUrl: string;
          networkId: BigNumber;
          nativeCurrency: [string, string, BigNumber] & {
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          token: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          explorer: string;
          description: string;
          website: string;
          detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
            activated: boolean;
            show: boolean;
            displayOrder: BigNumber;
            networkStatus: boolean;
            lastCheckedNetworkStatus: BigNumber;
          };
          networkPair: [string, BigNumber, string, string[]] & {
            name: string;
            depth: BigNumber;
            parentId: string;
            childIds: string[];
          };
        }
      ]
    >;

    getNetworkKey(
      chainId: string,
      shortName: string,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    getTotalTokensNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateNetwork(
      key: string,
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateParentTokenList(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBridgePair(
    _name: string,
    _parentBridgeName: string,
    _parentBridgeAddress: string,
    _childBridgeName: string,
    _childBridgeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNetwork(
    chainId: string,
    shortName: string,
    name: string,
    rpcUrl: string,
    networkId: BigNumberish,
    tokenName: string,
    tokenSymbol: string,
    tokenDecimals: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteBridge(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteNetwork(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActiveNetworks(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      string,
      string,
      string,
      [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      },
      [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      }
    ] & {
      key: string;
      chainId: string;
      shortName: string;
      name: string;
      rpcUrl: string;
      networkId: BigNumber;
      nativeCurrency: [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      token: [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      explorer: string;
      description: string;
      website: string;
      detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      };
      networkPair: [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      };
    })[]
  >;

  getAllBridgePairs(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      string,
      string,
      string,
      ([
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        }
      ] & {
        parentToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        childToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
      })[]
    ] & {
      key: string;
      name: string;
      parentBridgeName: string;
      parentBridgeAddress: string;
      childBridgeName: string;
      childBridgeAddress: string;
      tokenPairs: ([
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        }
      ] & {
        parentToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        childToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
      })[];
    })[]
  >;

  getAllNetworks(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      string,
      string,
      string,
      [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      },
      [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      }
    ] & {
      key: string;
      chainId: string;
      shortName: string;
      name: string;
      rpcUrl: string;
      networkId: BigNumber;
      nativeCurrency: [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      token: [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      explorer: string;
      description: string;
      website: string;
      detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      };
      networkPair: [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      };
    })[]
  >;

  getAllTokenPairs(
    overrides?: CallOverrides
  ): Promise<
    ([
      [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      }
    ] & {
      parentToken: [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      childToken: [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
    })[]
  >;

  getBridge(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      ([
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        }
      ] & {
        parentToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        childToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
      })[]
    ] & {
      key: string;
      name: string;
      parentBridgeName: string;
      parentBridgeAddress: string;
      childBridgeName: string;
      childBridgeAddress: string;
      tokenPairs: ([
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        }
      ] & {
        parentToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        childToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
      })[];
    }
  >;

  getNetwork(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      },
      string,
      string,
      string,
      [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      },
      [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      }
    ] & {
      key: string;
      chainId: string;
      shortName: string;
      name: string;
      rpcUrl: string;
      networkId: BigNumber;
      nativeCurrency: [string, string, BigNumber] & {
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      token: [string, number, string, string, BigNumber] & {
        tokenAddress: string;
        tokenType: number;
        name: string;
        symbol: string;
        decimals: BigNumber;
      };
      explorer: string;
      description: string;
      website: string;
      detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
        activated: boolean;
        show: boolean;
        displayOrder: BigNumber;
        networkStatus: boolean;
        lastCheckedNetworkStatus: BigNumber;
      };
      networkPair: [string, BigNumber, string, string[]] & {
        name: string;
        depth: BigNumber;
        parentId: string;
        childIds: string[];
      };
    }
  >;

  getNetworkKey(
    chainId: string,
    shortName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalTokensNum(overrides?: CallOverrides): Promise<BigNumber>;

  updateNetwork(
    key: string,
    chainId: string,
    shortName: string,
    name: string,
    rpcUrl: string,
    networkId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateParentTokenList(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBridgePair(
      _name: string,
      _parentBridgeName: string,
      _parentBridgeAddress: string,
      _childBridgeName: string,
      _childBridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addNetwork(
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteBridge(key: string, overrides?: CallOverrides): Promise<void>;

    deleteNetwork(key: string, overrides?: CallOverrides): Promise<void>;

    getActiveNetworks(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        string,
        string,
        string,
        [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        },
        [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        }
      ] & {
        key: string;
        chainId: string;
        shortName: string;
        name: string;
        rpcUrl: string;
        networkId: BigNumber;
        nativeCurrency: [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        token: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        explorer: string;
        description: string;
        website: string;
        detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        };
        networkPair: [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        };
      })[]
    >;

    getAllBridgePairs(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        string,
        string,
        string,
        ([
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          }
        ] & {
          parentToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          childToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
        })[]
      ] & {
        key: string;
        name: string;
        parentBridgeName: string;
        parentBridgeAddress: string;
        childBridgeName: string;
        childBridgeAddress: string;
        tokenPairs: ([
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          }
        ] & {
          parentToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          childToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
        })[];
      })[]
    >;

    getAllNetworks(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        string,
        string,
        string,
        [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        },
        [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        }
      ] & {
        key: string;
        chainId: string;
        shortName: string;
        name: string;
        rpcUrl: string;
        networkId: BigNumber;
        nativeCurrency: [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        token: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        explorer: string;
        description: string;
        website: string;
        detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        };
        networkPair: [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        };
      })[]
    >;

    getAllTokenPairs(
      overrides?: CallOverrides
    ): Promise<
      ([
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        }
      ] & {
        parentToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        childToken: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
      })[]
    >;

    getBridge(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        ([
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          }
        ] & {
          parentToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          childToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
        })[]
      ] & {
        key: string;
        name: string;
        parentBridgeName: string;
        parentBridgeAddress: string;
        childBridgeName: string;
        childBridgeAddress: string;
        tokenPairs: ([
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          },
          [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          }
        ] & {
          parentToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
          childToken: [string, number, string, string, BigNumber] & {
            tokenAddress: string;
            tokenType: number;
            name: string;
            symbol: string;
            decimals: BigNumber;
          };
        })[];
      }
    >;

    getNetwork(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        },
        string,
        string,
        string,
        [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        },
        [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        }
      ] & {
        key: string;
        chainId: string;
        shortName: string;
        name: string;
        rpcUrl: string;
        networkId: BigNumber;
        nativeCurrency: [string, string, BigNumber] & {
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        token: [string, number, string, string, BigNumber] & {
          tokenAddress: string;
          tokenType: number;
          name: string;
          symbol: string;
          decimals: BigNumber;
        };
        explorer: string;
        description: string;
        website: string;
        detail: [boolean, boolean, BigNumber, boolean, BigNumber] & {
          activated: boolean;
          show: boolean;
          displayOrder: BigNumber;
          networkStatus: boolean;
          lastCheckedNetworkStatus: BigNumber;
        };
        networkPair: [string, BigNumber, string, string[]] & {
          name: string;
          depth: BigNumber;
          parentId: string;
          childIds: string[];
        };
      }
    >;

    getNetworkKey(
      chainId: string,
      shortName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalTokensNum(overrides?: CallOverrides): Promise<BigNumber>;

    updateNetwork(
      key: string,
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateParentTokenList(
      key: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addBridgePair(
      _name: string,
      _parentBridgeName: string,
      _parentBridgeAddress: string,
      _childBridgeName: string,
      _childBridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNetwork(
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteBridge(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteNetwork(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActiveNetworks(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBridgePairs(overrides?: CallOverrides): Promise<BigNumber>;

    getAllNetworks(overrides?: CallOverrides): Promise<BigNumber>;

    getAllTokenPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getBridge(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNetwork(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkKey(
      chainId: string,
      shortName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokensNum(overrides?: CallOverrides): Promise<BigNumber>;

    updateNetwork(
      key: string,
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateParentTokenList(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBridgePair(
      _name: string,
      _parentBridgeName: string,
      _parentBridgeAddress: string,
      _childBridgeName: string,
      _childBridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNetwork(
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteBridge(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteNetwork(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActiveNetworks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBridgePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllNetworks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllTokenPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridge(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetwork(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkKey(
      chainId: string,
      shortName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokensNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateNetwork(
      key: string,
      chainId: string,
      shortName: string,
      name: string,
      rpcUrl: string,
      networkId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateParentTokenList(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
