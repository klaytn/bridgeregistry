/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeTokensInterface extends ethers.utils.Interface {
  functions: {
    "lockToken(address)": FunctionFragment;
    "registeredTokenList(uint256)": FunctionFragment;
    "registerToken(address,address)": FunctionFragment;
    "indexOfTokens(address)": FunctionFragment;
    "lockedTokens(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "registeredTokens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "unlockToken(address)": FunctionFragment;
    "deregisterToken(address)": FunctionFragment;
    "getRegisteredChildTokenList()": FunctionFragment;
    "getRegisteredTokenList()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "lockToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registeredTokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "unlockToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deregisterToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredChildTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredChildTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "TokenRegistered(address)": EventFragment;
    "TokenDeregistered(address)": EventFragment;
    "TokenLocked(address)": EventFragment;
    "TokenUnlocked(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type TokenRegisteredEvent = TypedEvent<[string] & { token: string }>;

export type TokenDeregisteredEvent = TypedEvent<[string] & { token: string }>;

export type TokenLockedEvent = TypedEvent<[string] & { token: string }>;

export type TokenUnlockedEvent = TypedEvent<[string] & { token: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class BridgeTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeTokensInterface;

  functions: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    indexOfTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<[string[]]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lockToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredTokenList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  registerToken(
    _token: string,
    _cToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  unlockToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deregisterToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegisteredChildTokenList(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegisteredTokenList(overrides?: CallOverrides): Promise<string[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lockToken(_token: string, overrides?: CallOverrides): Promise<void>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    registeredTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    unlockToken(_token: string, overrides?: CallOverrides): Promise<void>;

    deregisterToken(_token: string, overrides?: CallOverrides): Promise<void>;

    getRegisteredChildTokenList(overrides?: CallOverrides): Promise<string[]>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<string[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenRegistered(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenRegistered(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenDeregistered(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenDeregistered(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenLocked(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenLocked(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "TokenUnlocked(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUnlocked(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    indexOfTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegisteredTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredTokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerToken(
      _token: string,
      _cToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    indexOfTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deregisterToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredChildTokenList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredTokenList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
