/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeTransferInterface extends ethers.utils.Interface {
  functions: {
    "handleNoncesToBlockNums(uint64)": FunctionFragment;
    "operators(address)": FunctionFragment;
    "isRunning()": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "MAX_OPERATOR()": FunctionFragment;
    "feeOfERC20(address)": FunctionFragment;
    "lowerHandleNonce()": FunctionFragment;
    "upperHandleNonce()": FunctionFragment;
    "operatorThresholds(uint8)": FunctionFragment;
    "modeMintBurn()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestNonce()": FunctionFragment;
    "handledRequestTx(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "closedValueTransferVotes(uint64)": FunctionFragment;
    "recoveryBlockNumber()": FunctionFragment;
    "configurationNonce()": FunctionFragment;
    "getOperatorList()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "feeOfKLAY()": FunctionFragment;
    "start(bool)": FunctionFragment;
    "operatorList(uint256)": FunctionFragment;
    "deregisterOperator(address)": FunctionFragment;
    "setOperatorThreshold(uint8,uint8)": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "handleNoncesToBlockNums",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(functionFragment: "isRunning", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOfERC20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lowerHandleNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upperHandleNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorThresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modeMintBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handledRequestTx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closedValueTransferVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configurationNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOfKLAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "operatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "handleNoncesToBlockNums",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRunning", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOfERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lowerHandleNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upperHandleNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modeMintBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handledRequestTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closedValueTransferVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurationNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOfKLAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "RequestValueTransfer(uint8,address,address,address,uint256,uint64,uint256,bytes)": EventFragment;
    "HandleValueTransfer(bytes32,uint8,address,address,address,uint256,uint64,uint64,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "KLAYFeeChanged(uint256)": EventFragment;
    "ERC20FeeChanged(address,uint256)": EventFragment;
    "FeeReceiverChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestValueTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandleValueTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KLAYFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReceiverChanged"): EventFragment;
}

export type RequestValueTransferEvent = TypedEvent<
  [number, string, string, string, BigNumber, BigNumber, BigNumber, string] & {
    tokenType: number;
    from: string;
    to: string;
    tokenAddress: string;
    valueOrTokenId: BigNumber;
    requestNonce: BigNumber;
    fee: BigNumber;
    extraData: string;
  }
>;

export type HandleValueTransferEvent = TypedEvent<
  [
    string,
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    requestTxHash: string;
    tokenType: number;
    from: string;
    to: string;
    tokenAddress: string;
    valueOrTokenId: BigNumber;
    handleNonce: BigNumber;
    lowerHandleNonce: BigNumber;
    extraData: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type KLAYFeeChangedEvent = TypedEvent<[BigNumber] & { fee: BigNumber }>;

export type ERC20FeeChangedEvent = TypedEvent<
  [string, BigNumber] & { token: string; fee: BigNumber }
>;

export type FeeReceiverChangedEvent = TypedEvent<
  [string] & { feeReceiver: string }
>;

export class BridgeTransfer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeTransferInterface;

  functions: {
    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRunning(overrides?: CallOverrides): Promise<[boolean]>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    upperHandleNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    modeMintBurn(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    configurationNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOperatorList(overrides?: CallOverrides): Promise<[string[]]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    feeOfKLAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  handleNoncesToBlockNums(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isRunning(overrides?: CallOverrides): Promise<boolean>;

  registerOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

  upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

  operatorThresholds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  modeMintBurn(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

  handledRequestTx(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  closedValueTransferVotes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getOperatorList(overrides?: CallOverrides): Promise<string[]>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

  start(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deregisterOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperatorThreshold(
    _voteType: BigNumberish,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isRunning(overrides?: CallOverrides): Promise<boolean>;

    registerOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    modeMintBurn(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorList(overrides?: CallOverrides): Promise<string[]>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    start(_status: boolean, overrides?: CallOverrides): Promise<void>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deregisterOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RequestValueTransfer(uint8,address,address,address,uint256,uint64,uint256,bytes)"(
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      requestNonce?: null,
      fee?: null,
      extraData?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        requestNonce: BigNumber;
        fee: BigNumber;
        extraData: string;
      }
    >;

    RequestValueTransfer(
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      requestNonce?: null,
      fee?: null,
      extraData?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        requestNonce: BigNumber;
        fee: BigNumber;
        extraData: string;
      }
    >;

    "HandleValueTransfer(bytes32,uint8,address,address,address,uint256,uint64,uint64,bytes)"(
      requestTxHash?: null,
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      handleNonce?: null,
      lowerHandleNonce?: null,
      extraData?: null
    ): TypedEventFilter<
      [
        string,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        requestTxHash: string;
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        handleNonce: BigNumber;
        lowerHandleNonce: BigNumber;
        extraData: string;
      }
    >;

    HandleValueTransfer(
      requestTxHash?: null,
      tokenType?: null,
      from?: string | null,
      to?: string | null,
      tokenAddress?: string | null,
      valueOrTokenId?: null,
      handleNonce?: null,
      lowerHandleNonce?: null,
      extraData?: null
    ): TypedEventFilter<
      [
        string,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        requestTxHash: string;
        tokenType: number;
        from: string;
        to: string;
        tokenAddress: string;
        valueOrTokenId: BigNumber;
        handleNonce: BigNumber;
        lowerHandleNonce: BigNumber;
        extraData: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "KLAYFeeChanged(uint256)"(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    KLAYFeeChanged(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    "ERC20FeeChanged(address,uint256)"(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    ERC20FeeChanged(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    "FeeReceiverChanged(address)"(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;

    FeeReceiverChanged(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;
  };

  estimateGas: {
    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRunning(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    upperHandleNonce(overrides?: CallOverrides): Promise<BigNumber>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modeMintBurn(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestNonce(overrides?: CallOverrides): Promise<BigNumber>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoveryBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    configurationNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorList(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handleNoncesToBlockNums(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRunning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MAX_OPERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOfERC20(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowerHandleNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upperHandleNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorThresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modeMintBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handledRequestTx(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closedValueTransferVotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configurationNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOfKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deregisterOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorThreshold(
      _voteType: BigNumberish,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
