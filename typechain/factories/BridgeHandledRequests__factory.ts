/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BridgeHandledRequests,
  BridgeHandledRequestsInterface,
} from "../BridgeHandledRequests";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    name: "handledRequestTx",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50609c8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638a75eee214602d575b600080fd5b604760048036036020811015604157600080fd5b5035605b565b604080519115158252519081900360200190f35b60006020819052908152604090205460ff168156fea165627a7a7230582000cfd022ed85fd60be9b673bdd097b424dfe829f7dfac0b67533e15fe2b8022f0029";

export class BridgeHandledRequests__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeHandledRequests> {
    return super.deploy(overrides || {}) as Promise<BridgeHandledRequests>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BridgeHandledRequests {
    return super.attach(address) as BridgeHandledRequests;
  }
  connect(signer: Signer): BridgeHandledRequests__factory {
    return super.connect(signer) as BridgeHandledRequests__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeHandledRequestsInterface {
    return new utils.Interface(_abi) as BridgeHandledRequestsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeHandledRequests {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgeHandledRequests;
  }
}
