/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeFeeInterface extends ethers.utils.Interface {
  functions: {
    "feeOfERC20(address)": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "feeOfKLAY()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feeOfERC20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOfKLAY", values?: undefined): string;

  decodeFunctionResult(functionFragment: "feeOfERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOfKLAY", data: BytesLike): Result;

  events: {
    "KLAYFeeChanged(uint256)": EventFragment;
    "ERC20FeeChanged(address,uint256)": EventFragment;
    "FeeReceiverChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KLAYFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReceiverChanged"): EventFragment;
}

export type KLAYFeeChangedEvent = TypedEvent<[BigNumber] & { fee: BigNumber }>;

export type ERC20FeeChangedEvent = TypedEvent<
  [string, BigNumber] & { token: string; fee: BigNumber }
>;

export type FeeReceiverChangedEvent = TypedEvent<
  [string] & { feeReceiver: string }
>;

export class BridgeFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeFeeInterface;

  functions: {
    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    feeOfKLAY(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "KLAYFeeChanged(uint256)"(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    KLAYFeeChanged(
      fee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    "ERC20FeeChanged(address,uint256)"(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    ERC20FeeChanged(
      token?: string | null,
      fee?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { token: string; fee: BigNumber }>;

    "FeeReceiverChanged(address)"(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;

    FeeReceiverChanged(
      feeReceiver?: string | null
    ): TypedEventFilter<[string], { feeReceiver: string }>;
  };

  estimateGas: {
    feeOfERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    feeOfKLAY(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feeOfERC20(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOfKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
